{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\JoseReinoso\\\\Lambda\\\\React-Front-End\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOGIN_START, LOGIN_SUCCESS, LOGIN_ERROR } from \"../actions/login\";\nconst initialState = {\n  // our \"success\" state\n  user: {},\n  // want to make sure we account for all possible states,\n  // including the loading and error states\n  isLoading: false,\n  error: null\n}; // our finite state machine written out in code--\n// all the possible states, and actions that can be taken\n// which result in a new state.\n\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_START:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        user: action.payload,\n        isLoading: false\n      });\n\n    case LOGIN_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload,\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/JoseReinoso/lambda/React-Front-End/front-end/src/reducers/login.js"],"names":["LOGIN_START","LOGIN_SUCCESS","LOGIN_ERROR","initialState","user","isLoading","error","reducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SACEA,WADF,EAEEC,aAFF,EAGEC,WAHF,QAIO,kBAJP;AAMA,MAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAE,EAFa;AAGnB;AACA;AACAC,EAAAA,SAAS,EAAE,KALQ;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAArB,C,CASA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,WAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,SAAS,EAAE;AAFb;;AAIF,SAAKJ,aAAL;AACE,+BACKO,KADL;AAEEJ,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAFf;AAGEN,QAAAA,SAAS,EAAE;AAHb;;AAKF,SAAKH,WAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAFhB;AAGEN,QAAAA,SAAS,EAAE;AAHb;;AAKF;AACE,aAAOG,KAAP;AAnBJ;AAqBD","sourcesContent":["import {\n  LOGIN_START,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n} from \"../actions/login\";\n\nconst initialState = {\n  // our \"success\" state\n  user: {},\n  // want to make sure we account for all possible states,\n  // including the loading and error states\n  isLoading: false,\n  error: null\n};\n\n// our finite state machine written out in code--\n// all the possible states, and actions that can be taken\n// which result in a new state.\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload,\n        isLoading: false\n      };\n    case LOGIN_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}