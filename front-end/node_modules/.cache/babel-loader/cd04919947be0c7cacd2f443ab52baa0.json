{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JoseReinoso\\\\lambda\\\\React-Front-End\\\\front-end\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { reducer as loginReducer } from \"./reducers/login\";\nimport { reducer as signupReducer } from \"./reducers/signup\";\nimport { reducer as fetchItemsReducer } from \"./reducers/fetchItems\";\nimport { reducer as fetchUserByIdReducer } from \"./reducers/userItems\";\nimport { reducer as addItemReducer } from \"./reducers/addItem\";\nimport { reducer as updateUserBioReducer } from \"./reducers/updateUserBio\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App'; // this combines everything into one giant main reducer,\n// so our action types still need to be unique\n\nconst rootReducer = combineReducers({\n  user: loginReducer,\n  newUser: signupReducer,\n  items: fetchItemsReducer,\n  userInfo: fetchUserByIdReducer,\n  newItem: addItemReducer,\n  userBio: updateUserBioReducer\n}); // create our store or \"global state object\"\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\nReactDOM.render( // gives all children components access to the store\nReact.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/JoseReinoso/lambda/React-Front-End/front-end/src/index.js"],"names":["React","ReactDOM","createStore","combineReducers","applyMiddleware","Provider","thunk","logger","reducer","loginReducer","signupReducer","fetchItemsReducer","fetchUserByIdReducer","addItemReducer","updateUserBioReducer","BrowserRouter","Router","App","rootReducer","user","newUser","items","userInfo","newItem","userBio","store","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,kBAAxC;AACA,SAASD,OAAO,IAAIE,aAApB,QAAyC,mBAAzC;AACA,SAASF,OAAO,IAAIG,iBAApB,QAA6C,uBAA7C;AACA,SAASH,OAAO,IAAII,oBAApB,QAAgD,sBAAhD;AACA,SAASJ,OAAO,IAAIK,cAApB,QAA0C,oBAA1C;AACA,SAASL,OAAO,IAAIM,oBAApB,QAAgD,0BAAhD;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAO,sCAAP;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGf,eAAe,CAAC;AAChCgB,EAAAA,IAAI,EAAEV,YAD0B;AAEhCW,EAAAA,OAAO,EAAEV,aAFuB;AAGhCW,EAAAA,KAAK,EAAEV,iBAHyB;AAIhCW,EAAAA,QAAQ,EAAEV,oBAJsB;AAKhCW,EAAAA,OAAO,EAAEV,cALuB;AAMhCW,EAAAA,OAAO,EAAEV;AANuB,CAAD,CAAnC,C,CASA;;AACA,MAAMW,KAAK,GAAGvB,WAAW,CAACgB,WAAD,EAAcd,eAAe,CAACE,KAAD,EAAQC,MAAR,CAA7B,CAAzB;AAEAN,QAAQ,CAACyB,MAAT,EACI;AACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,CAFJ,EAOME,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPN","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { reducer as loginReducer } from \"./reducers/login\";\nimport { reducer as signupReducer } from \"./reducers/signup\";\nimport { reducer as fetchItemsReducer } from \"./reducers/fetchItems\";\nimport { reducer as fetchUserByIdReducer } from \"./reducers/userItems\";\nimport { reducer as addItemReducer } from \"./reducers/addItem\";\nimport { reducer as updateUserBioReducer } from \"./reducers/updateUserBio\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\n\n// this combines everything into one giant main reducer,\n// so our action types still need to be unique\nconst rootReducer = combineReducers({\n    user: loginReducer,\n    newUser: signupReducer,\n    items: fetchItemsReducer,\n    userInfo: fetchUserByIdReducer,\n    newItem: addItemReducer,\n    userBio: updateUserBioReducer,\n});\n\n// create our store or \"global state object\"\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    // gives all children components access to the store\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n    , document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}